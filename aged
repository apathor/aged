#!/bin/bash
# aged - Find files sorted by timestamp metadata.
# Â© Mike Lalumiere 2018

# ts - time stamp
# print time with bash builtin
ts() { printf "%(${1:-%s})T\n" "${2:--1}"; }

# ti - time interval
#
ti() {
    # usage
    read -r -d '' use <<EOF
USAGE: ti [OPTIONS] INTERVAL
Parse and render temporal shorthand.

 1d        : 86400 | 1Ms    : 1000000
 43m20s    : 2600  | 3Kh    : 259200000
 18h12m16s : 65536 | 2Gy    : 63115200000000000

  ([0-9]+[SCALE][UNIT][SPACE]*)+

MODES
 -n : numeric   : output integer number of seconds in INTERVAL
 -s : shorthand : output string shorthand of INTERVAL
 -a : after     : output date plus INTERVAL
 -b : before    : output date minus INTERVAL

OPTIONS
 -d TIME   : calculate dates relative to TIME
 -f FORMAT : render dates with printf using FORMAT

UNITS:                  | SCALES:
 s : second  d : day    |  D : 10e1  M : 10e6
 m : minute  w : week   |  H : 10e2  G : 10e9
 h : hour    y : year   |  K : 10e3  T : 10e12
EOF
    # mark current time
    local now
    now=$(ts %s)
    # time scales
    declare -A scale
    scale=(
        ["D"]=$((10**1))
        ["H"]=$((10**2))
        ["K"]=$((10**3))
        ["M"]=$((10**6))
        ["G"]=$((10**9))
        ["T"]=$((10**12))
    )
    # time units
    declare -A unit
    unit=(
        ["y"]=31557600
        ["w"]=604800
        ["d"]=86400
        ["h"]=3600
        ["m"]=60
        ["s"]=1
    )
    # reverse lookup integer on unit
    local revu
    declare -A revu
    for key in "${!unit[@]}"; do revu["${unit[$key]}"]="$key"; done
    # accept options
    local mode=2 fmt="%s" when=""
    local opt OPTIND OPTARG
    while getopts ":abdf:hns" opt; do
        case "$opt" in
            # program mode
            a) mode=4 ;; # date after given interval
            b) mode=3 ;; # date before given interval
            n) mode=2 ;; # number of seconds in given interval
            s) mode=1 ;; # shorthand string for given interval
            # relative epoch for date calculation
            d) now="$OPTARG" ;;
            # format string for date output
            f) fmt="$OPTARG" ;;
            h) # help
                printf "%s\n" "$use" >&2
                return
                ;;
            ?) # invalid?
                printf "Invalid option '%s'\n%s\n" "$OPTARG" "$use" >&2
                return 1
                ;;
        esac
    done
    shift $((OPTIND - 1))
    # accept arguments
    local inp="$*"
    if [ -z "$inp" ]; then
        printf "%s\n" "$use" >&2
        return
    fi
    # decode input string into integer seconds
    local num="" char="" secs=0 mul=1 idx=0
    while read -r -n1 char; do
        let idx++
        case "$char" in
            " ")
                # ignore whitespace
                continue
                ;;
            [0-9])
                # digit
                num="${num}${char}"
                ;;
            ["$(printf "%s" "${!scale[@]}")"])
                # unit of scale
                mul="${scale[$char]}"
                ;;
            ["$(printf "%s" "${!unit[@]}")"])
                # unit of time
                num="${num:-1}"
                secs=$(( secs + (num * mul * unit["$char"]) ))
                num=""
                mul=1
                ;;
            ?)
                # printf "Failed to parse character '%s' at '%d'.\n" "$char" "$idx" >&2
                return 2
            ;;
        esac
    done <<< "$inp"
    if [ -n "$num" ]; then secs=$(( secs + num )); fi
    # encode an interval string
    local tstr="" left="$secs" per=0
    while read -r val; do
        per=$((left / val))
        left=$((left % val))
        if [[ "$per" -eq 0 ]]; then continue; fi
        tstr+="${per}${revu[$val]}"
    done < <(printf "%s\n" "${unit[@]}" | sort -r -n)
    # output
    case "$mode" in
        1) printf "%s\n" "$tstr" ;;
        2) printf "%d\n" "$secs" ;;
        3) ts "$fmt" $(( now - secs )) ;;
        4) ts "$fmt" $(( now + secs )) ;;
    esac
}

aged() {
    # usage
    read -r -d '' use <<EOF
USAGE: aged [OPTIONS] [DIRECTORY ...]
Print all files in given directory trees sorted by time of last access, change,
 or modification. Files are sorted by access time from oldest to newest by default.

OPTIONS:
 -a -c -m    : Sort by time last of access, change, or modification.
 -d          : Limit results to directories.
 -l          : Include columns for date and time.
 -n NUMBER   : List only the first NUMBER lines.
 -r          : Reverse sort order, newest files first.
 -p GLOB     : Print only files matching GLOB.
 -y INTERVAL : Show files younger than INTERVAL.
 -z INTERVAL : Show files older than than INTERVAL.

EXAMPLES:
Show the least and most recently accessed file here.
 $ aged -n1; aged -r -n1
Show the path and timestamp of the ten most recently modified files "~/foo".
 $ aged -m -l -r -n10 ~/foo
Show files modified more than two days but less than three weeks ago.
 $ aged -m -z 2d -y 3w
View the six least recently accessed JPEGs in the given directory.
 $ feh -Z -f <(aged -a -n6 -p '*.jpg' ~/img/)
Play the oldest OGG video in the given directory.
 $ mpv \$(aged -m -p '*.ogg' -n1 ~/videos/)

EOF
    # check requirements
    if ! type sort find &>/dev/null; then
        echo "Core utilities find and sort are required!" >&2
        return 255
    fi
    # accept options
    local mode=1 num=0 pat='*' yng="" kind='f' rev long
    local opt OPTIND OPTARG
    while getopts ":acdhmn:p:rly:z:" opt; do
        case "$opt" in
            # sort mode
            a) mode=1        ;; # consider atime
            c) mode=2        ;; # consider ctime
            m) mode=3        ;; # consider mtime
            d) # find directories
                kind='d'
                ;;
            n) # first N lines
                num="$OPTARG"
                if ! [[ "$num" =~ ^[0-9]+$ ]]; then
                    printf "Argument to -n must be a number!\n" >&2
                    return 3
                fi
                ;;
            p) # file glob pattern
                pat="$OPTARG"
                ;;
            l) # output long details
                long="yes"
                ;;
            r) # reverse output sort by age
                rev="yes"
                ;;
            y) # select files younger than the given interval in the past
                if ! yng=$(ti -b "$OPTARG"); then
                    printf "Could not parse '%s' as a time interval.\n" "$OPTARG" >&2
                    return 3
                fi
                ;;
            z) # older than time
                if ! old=$(ti -b "$OPTARG"); then
                    printf "Could not parse '%s' as a time interval.\n" "$OPTARG" >&2
                    return 3
                fi
                ;;
            h) # help
                printf "%s\n" "$use" >&2
                return
                ;;
            \?) # invalid option
                printf "Bad option: -%s\n %s\n" "$OPTARG" "$use" >&2
                return 2
                ;;
        esac
    done
    shift $((OPTIND - 1))
    # accept directory arguments
    declare -a dirs
    for dir in "$@"; do
        if ! [ -d "$dir" ]; then
            printf "%s is not a directory\n" "$dir" >&2
            return 3
        else
            dirs+=("$dir")
        fi
    done
    # by default search the current directory
    if [ -z "${dirs[@]}" ]; then
        dirs+=(".")
    fi
    # output paths with find stat: atime mtime ctime path
    # TODO better handling of filenames containing whitespace
    local ind=0
    while read -r a c m f && [[ "$num" == 0 || "$ind" -lt "$num" ]]; do
        # determine current time
        declare -a when
        when=(" " "$a" "$c" "$m")
        # determine current time
        local now time since
        now=$(ts %s)
        time="${when[$mode]}"
        since=$((now - time))
        # filter results maybe
        if [ -n "$yng" ] && [[ "$yng" -gt "$time" ]]; then continue; fi
        if [ -n "$old" ] && [[ "$old" -lt "$time" ]]; then continue; fi
        # output long or short
        if [ -n "$long" ]; then
            printf "%(%F %T)T %s %s\n" "$time" "$(ti -s "$since")" "$f"
        else
            printf "%s\n" "$f"
        fi
        # count a result
        let ind++
    done < <(find "${dirs[@]}" -type "$kind" -iname "$pat" -printf '%As %Cs %Ts %p\n' |
                    eval sort "${rev+-r}" -n -k "$mode")
}
# run it unless sourced
if [[ "${BASH_SOURCE[0]}" == "$0" ]]; then aged "$@"; fi
